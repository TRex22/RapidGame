{"name":"Rapidxna","tagline":"https://rapidxna.codeplex.com","body":"RapidXNA\r\n========\r\n@edg3\r\n\r\nhttps://rapidxna.codeplex.com for original SVN\r\n\r\nAbout RapidXNA\r\n==============\r\nThis is my attempt at migrating RapidXNA made by @edg3 to GitHub,\r\nUpgrading it to work with MonoGame, and also getting it to work \r\nin its 2.0 Alpha version with XNA.\r\n\r\nTODO\r\n====\r\n- [ ] move TODOs to Issues\r\n- [ ] Clean up readme\r\n- [ ] Github Pages\r\n- [ ] link to Ernest's random repo\r\n- [ ] proper svn link or migration if possible\r\n- [ ] Move Codeplex Issues to Github Issues\r\n- [ ] Send Links To people involoved to join the GitHub Project\r\n\t\thttps://rapidxna.codeplex.com/team/view\r\n- [ ] Migrate Histories of SVN files?\r\n\t\tMay Leave on SVN, moving forward is more important\r\n- [ ] Rename to something more friendly to XNA and MonoGame\r\n\r\nOriginal Notes:\r\n===============\r\n\r\n\r\nAbout RapidXNA\r\n--------------\r\nA simple framework that aims to make starting up new XNA projects for Windows, \r\nXbox 360 and Windows Phone 7 easier. Using RapidXNA you should be able to \r\neasily port between the 3 platforms with only minor code changes to your projects.\r\n\r\nNews:\r\n-----\r\nRapidXNA 2.0 Alpha is available (it was meant to mimic functionality of \r\nRapidXNA 1 for now. If someone can confirm that RapidXNA 1 works on XBOX I can \r\nmove it from Beta to Final release and focus on development of RapidXNA 2.0 that \r\nwill hopefully in the end support Windows, Mac, Linux, Windows Phone 7, and Xbox 360. \r\nFurthermore, after RapidXNA 2.0 Release is ready I would like to look into extending to \r\ninclude Android and iOS eventually (if possible).\r\n\r\nRapidXNA 2.0 worked out well, and much easier to use for the game development during \r\nLudum Dare than I could have hoped for, but once again I got stumped by the Visual Studio \r\nbuilt-in functions for creating \"copy for\" Windows Phone and the problem most likely propogates \r\nto the Xbox 360 version, so after some thought and sleep Im going to stop development of \r\nRapidXNA in favour of building a system that works in a unified way for 2D game dev on all \r\nplatforms I want to support. I will post more about it when I get what I want to do right.\r\n\r\n~~The RapidXNA 1 and 2.0 code will remain here though I will most probably not actively ~~\r\n~~do development on the code any more. Should anyone want to take over the dev of RapidXNA ~~\r\n~~send me a message/email and I can hand over project ownership.~~\r\n\r\nNotes:\r\nPlease refer the the documentation for examples on how to use the framework.\r\n\r\nLatest Changes:\r\n\r\n    Added RapidEngine.Exit()\r\n    Fixed accessibilty to RapidXNA.Service.ScreenService\r\n\r\n\r\nOld Changes:\r\n\r\nProjects using RapidXNA\r\nGalactic Jump - coming soon\r\n\r\nLast edited Apr 24, 2012 at 11:21 AM by edg3, version 6\r\n\r\nOriginal Documentation\r\n======================\r\n\r\nHow to use RapidXNA\r\n1. Set up the project\r\n\r\n    Add a reference to the .dll that corresponds with your current project\r\n        Windows: RapidXNA.dll\r\n        Xbox 360: RapidXNA360.dll\r\n        Windows Phone 7: RapidXNAWP7.dll (supports Mango, 7.1 only)\r\n    Remove the SpriteBatch related code and variables from Game1.cs\r\n    Create a variable of type RapidXNA.RapidEngine, instantiate it in the LoadContent() method in your Game1.cs\r\n    Add an Update call to your Update() method in Game1.cs for your instance of RapidXNA.RapidEngine's Update()\r\n    Add a Draw call to your Draw() method in Game1.cs for your instance of RapidXNA.RapidEngine's Draw()\r\n    Create a new class for your initial game screen (or state if you prefer) and inherit from RapidXNA.DataType.IGameScreen\r\n\r\n2. Using \"game screens\"\r\nEach IGameScreen has overridable Load, Draw and Update methods, that correspond directly to the methods in your usual Game1.cs code. These are all called automatically in the background by the RapidEngine. They also each have a reference to Engine.\r\n\r\nUsing the ScreenService\r\n3. Using Services\r\nRapidXNA calls the major reusable classes that you would usually only need one instance of a \"service\". The engine will update and draw all services (so if you want to write an in app console you would most probably make it a service. You can write your own services by inheriting from IRapidService.\r\n\r\nUsing general Services\r\nFeatures\r\nThis list is a work in progress\r\n\r\n    Game state management via \"screens\"\r\n    Asynchronous screen loading\r\n    Built in Keyboard, GamePad and Mouse wrapping (Phone touch input wrapping in planning).\r\n\r\nStructure\r\nOverview of the major classes:\r\n\r\n![alt tag](http://i40.tinypic.com/34qpooi.png)\r\n\r\n\r\nDiscussions From Codeplex\r\n=========================\r\n\r\nSuggestions \r\n-----------\r\n\r\n Wiki Link: [discussion:285185]\r\nedg3\r\nCoordinator\r\nJan 6, 2012 at 9:46 AM\r\n\r\n\tPlease post all suggestions you have for addition to the framework here.\r\n\t\r\nlancejz\r\nApr 17, 2012 at 12:43 AM\r\n\t\r\n\r\n\tHow about a project template(s) in the download, for even more rapid XNA, as well as class templates.\r\n\t\r\nedg3\r\nCoordinator\r\nApr 17, 2012 at 6:49 AM\r\n\t\r\n\r\n\tProject templates make sense. What class templates do you think would make sense?\r\n\r\nCodePlex Issues\r\n===============\r\n\r\nLoading wait time\r\n-----------------\r\nAdd in a way to add a static loading screen image for when loading a new screen, or a game screen to draw/update when currently loading.\r\n\r\nId #1000 | Release: None | Updated: Feb 1, 2013 at 6:01 AM by edg3 | Created: Jan 30, 2012 at 11:45 AM by edg3\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}